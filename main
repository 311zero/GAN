import os
import matplotlib.pyplot as plt
import itertools
import pickle
import imageio
import torch
import torch.optim as optim
from torchvision import datasets, transforms
from torch.autograd import Variable
from gan_model import generator, discriminator, BCE_loss

os.environ["CUDA_VISIBLE_DEVICES"] = "0"

# fixed noise
with torch.no_grad():
    fixed_z = torch.randn((5 * 5, 100)).cuda()


def show_result(num_epoch, show = False, save = False, path = 'result.png', isFix=False, G=generator):
    z = torch.randn((5*5, 100))
    z = Variable(z.cuda(), volatile=True)

    G.eval()
    if isFix:
        test_images = G(fixed_z)
    else:
        test_images = G(z)
    G.train()

    size_figure_grid = 5
    fig, ax = plt.subplots(size_figure_grid, size_figure_grid, figsize=(5, 5))
    for i, j in itertools.product(range(size_figure_grid), range(size_figure_grid)):
        ax[i, j].get_xaxis().set_visible(False)
        ax[i, j].get_yaxis().set_visible(False)

    for k in range(5*5):
        i = k // 5
        j = k % 5
        ax[i, j].cla()
        ax[i, j].imshow(test_images[k, :].cpu().data.view(28, 28).numpy(), cmap='gray')

    label = 'Epoch {0}'.format(num_epoch)
    fig.text(0.5, 0.04, label, ha='center')
    if save:
        plt.savefig(path)
    if show:
        plt.show()
    else:
        plt.close()


def show_row_mnist(train_loader, show=False, path='raw_MNIST.png'):
    if not os.path.exists(path):
        raw_mnist = []
        size_figure_grid = 5
        fig, ax = plt.subplots(size_figure_grid, size_figure_grid, figsize=(5, 5))
        for i, j in itertools.product(range(size_figure_grid), range(size_figure_grid)):
            ax[i, j].get_xaxis().set_visible(False)
            ax[i, j].get_yaxis().set_visible(False)
        for i, x_data, x_lable in enumerate(train_loader):
            if i < size_figure_grid ** 2:
                raw_mnist.append(x_data)
        for k in range(size_figure_grid ** 2):
            i = k // 5
            j = k % 5
            ax[i, j].cla()
            ax[i, j].imshow(raw_mnist[k].numpy(), cmap='gray')

        label = 'row MNIST'
        fig.text(0.5, 0.04, label, ha='center')
        plt.savefig(path)

        if show:
            plt.show()
        else:
            plt.close()


def show_train_hist(hist, show = False, save = False, path ='Train_hist.png'):
    x = range(len(hist['D_losses']))

    y1 = hist['D_losses']
    y2 = hist['G_losses']

    plt.plot(x, y1, label='D_loss')
    plt.plot(x, y2, label='G_loss')

    plt.xlabel('Epoch')
    plt.ylabel('Loss')

    plt.legend(loc=4)
    plt.grid(True)
    plt.tight_layout()

    if save:
        plt.savefig(path)

    if show:
        plt.show()
    else:
        plt.close()


def train():
    # training parameters
    batch_size = 128
    lr = 0.0002
    train_epoch = 100

    # data_loader
    transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5))
    ])

    train_loader = torch.utils.data.DataLoader(
        datasets.MNIST('data', train=True, download=True, transform=transform),
        batch_size=batch_size, shuffle=True)

    # network
    G = generator(input_size=100, image_size=28*28)
    D = discriminator(input_size=28*28, lable_size=1)
    G.cuda()
    D.cuda()

    # Adam optimizer
    G_optimizer = optim.Adam(G.parameters(), lr=lr)
    D_optimizer = optim.Adam(D.parameters(), lr=lr)

    # results save folder
    if not os.path.isdir('GAN_results'):
        os.mkdir('GAN_results')
    if not os.path.isdir('GAN_results/Random_results'):
        os.mkdir('GAN_results/Random_results')
    if not os.path.isdir('GAN_results/Fixed_results'):
        os.mkdir('GAN_results/Fixed_results')

    train_hist = {}
    train_hist['D_losses'] = []
    train_hist['G_losses'] = []
    for epoch in range(train_epoch):
        D_losses = []
        G_losses = []
        for x_data, _ in train_loader:  # the first is image, second is label
            # train discriminator D
            D.zero_grad()
            # make x_(128,1,28,28) to be (128,784)
            x_data = x_data.view(-1, 28 * 28)

            mini_batch = x_data.size()[0]

            y_real = torch.ones(mini_batch).reshape(-1,1)
            y_fake = torch.zeros(mini_batch).reshape(-1,1)

            x_data, y_real, y_fake = Variable(x_data.cuda()), Variable(y_real.cuda()), Variable(y_fake.cuda())
            D_result = D(x_data)
            # D_result = torch.squeeze(D_result)
            # y_real = y_real.reshape(-1,1)
            D_real_loss = BCE_loss(D_result, y_real)
            D_real_score = D_result

            z_data = torch.randn((mini_batch, 100))
            z_data = Variable(z_data.cuda())
            G_result = G(z_data)

            D_result = D(G_result)
            D_fake_loss = BCE_loss(D_result, y_fake)
            D_fake_score = D_result

            D_train_loss = D_real_loss + D_fake_loss

            D_train_loss.backward()
            D_optimizer.step()

            D_losses.append(D_train_loss.data[0])

            # train generator G
            G.zero_grad()

            z = torch.randn((mini_batch, 100))
            y = torch.ones(mini_batch).view(-1, 1)

            z, y = Variable(z.cuda()), Variable(y.cuda())
            G_result = G(z)
            D_result = D(G_result)
            G_train_loss = BCE_loss(D_result, y)
            G_train_loss.backward()
            G_optimizer.step()

            G_losses.append(G_train_loss.data[0])

        print(f'[{(epoch + 1)}/{train_epoch}]: loss_d: {torch.mean(torch.FloatTensor(D_losses)):.3f}, loss_g: \
        {torch.mean(torch.FloatTensor(G_losses)):.3f}')
        p = 'GAN_results/Random_results/MNIST_GAN_' + str(epoch + 1) + '.png'
        fixed_p = 'GAN_results/Fixed_results/MNIST_GAN_' + str(epoch + 1) + '.png'
        show_result((epoch+1), save=True, path=p, isFix=False, G=G)
        show_result((epoch+1), save=True, path=fixed_p, isFix=True, G=G)
        train_hist['D_losses'].append(torch.mean(torch.FloatTensor(D_losses)))
        train_hist['G_losses'].append(torch.mean(torch.FloatTensor(G_losses)))


    print("Training finish!... save training results")
    torch.save(G.state_dict(), "GAN_results/generator_param.pkl")
    torch.save(D.state_dict(), "GAN_results/discriminator_param.pkl")
    with open('GAN_results/train_hist.pkl', 'wb') as f:
        pickle.dump(train_hist, f)

    show_train_hist(train_hist, save=True, path='GAN_results/MNIST_GAN_train_hist.png')
    show_row_mnist(train_loader, show=False, path='GAN_results/raw_MNIST.png')

    images = []
    for e in range(train_epoch):
        img_name = 'GAN_results/Fixed_results/MNIST_GAN_' + str(e + 1) + '.png'
        images.append(imageio.imread(img_name))
    imageio.mimsave('GAN_results/generation_animation.gif', images, fps=5)


if __name__ == '__main__':
    train()
